#!/bin/sh -e

# Functions {{{
# =============

err() {
    echo "$@" >&2
    exit 1
}

p() {
    echo âžœ "$@"
    "$@"
}

# }}}

# Help, version, options {{{
# ==========================

readonly VERSION=0.2.0

help() {
    man "$(basename "$0")"
}

version() {
    echo "sassdocify $VERSION"
    echo 'This software is public domain, see <http://unlicense.org/>.'
}

# Default options.
MSG='Update documentation'

# Parse options and arguments.
while [ $# != 0 ]; do
    case $1 in
        -h|--help) help; exit ;;
        -V|--version) version; exit ;;
        -m|--message) shift; MSG=$1; shift ;;
        -*) err "Unknown option: $1" ;;
        *) SRC="$1"; shift ;;
    esac
done

readonly MSG

# }}}

# Source {{{
# ==========

# First argument, or CWD (as absolute path).
readonly SRC=$(readlink -f "${SRC:-$PWD}")

# Get the root Git directory.
if ! root=$(git rev-parse --show-toplevel 2> /dev/null); then
    err 'Not in a Git repository.'
fi

cd "$root"
unset root

if ! find "$SRC" -type f -name '*.s[ac]ss' | grep -q .; then
    err 'No documentable file found in source directory.'
fi

# }}}

# SassDoc executable {{{
# ======================

# Can be defined from environment.
SASSDOC=${SASSDOC:-sassdoc}

# }}}

# Push URL.
readonly PUSH=$(git config --get remote.origin.url)

p rm -rf .pages

if ! git branch | grep -q gh-pages; then
    readonly FIRST=1

    # Make `gh-pages` branch.
    p git clone . .pages
    p git -C .pages checkout --orphan gh-pages
    p git -C .pages remote set-url origin "$PUSH"
else
    # Clone existing branch
    p git clone -b gh-pages . .pages
fi

# Remove everything.
p git -C .pages rm -rf --ignore-unmatch . || :

# Compile documentation.
p $SASSDOC -f "$SRC" .sassdoc

# Copy everything from documentation into pages directory and track.
for file in $(cd .sassdoc && echo ./*); do
    p cp -R ".sassdoc/$file" .pages
    p git -C .pages add "$file"
done

# Commit if files were modified or added.
if git -C .pages status --porcelain | grep -q '^[AM]'; then
    p git -C .pages commit -m "$MSG"
fi

echo
echo 'Documentation is ready in `.pages` directory!'
echo

if [ "$FIRST" ]; then
    echo '    cd .pages && git push -u origin gh-pages'
else
    echo '    cd .pages && git push'
fi
